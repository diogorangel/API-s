{
	"info": {
		"_postman_id": "c4497a46-4908-4bf1-97b7-d5022f51b0c8",
		"name": "Writing test scripts - Marvel API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10369220"
	},
	"item": [
		{
			"name": "Postman Echo GET",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"$timestampHeader\", new Date())"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Environment to be production\", function () {",
							"  pm.expect(pm.environment.get(\"env\"))",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "timestamp",
						"value": "{{timestampHeader}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://gateway.marvel.com:443/v1/public/creators?apikey=",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"port": "443",
					"path": [
						"v1",
						"public",
						"creators"
					],
					"query": [
						{
							"key": "apikey",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Functional2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let jsonResponse = pm.response.json();",
							"",
							"pm.test(\"Response should be a parsable JSON\", function() {",
							"    pm.expect(jsonResponse).to.be.ok;",
							"});",
							"",
							"pm.test(\"Response body should be an object\", function() {",
							"    pm.expect(jsonResponse).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    pm.expect(jsonResponse.args).to.be.a('object');",
							"    pm.expect(jsonResponse.data).to.be.a('string');",
							"    pm.expect(jsonResponse.files).to.be.a('object');",
							"    pm.expect(jsonResponse.form).to.be.a('object');",
							"    pm.expect(jsonResponse.headers).to.be.a('object');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "This is expected to be sent back as part of response body."
				},
				"url": {
					"raw": "https://gateway.marvel.com:443/v1/public/creators?apikey=",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"port": "443",
					"path": [
						"v1",
						"public",
						"creators"
					],
					"query": [
						{
							"key": "apikey",
							"value": ""
						}
					]
				},
				"description": "Another example of bundling several assertions within a single test, and also of bundling several tests within a try-catch code block."
			},
			"response": [
				{
					"name": "Functional2",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "This is expected to be sent back as part of response body."
						},
						"url": {
							"raw": "https://postman-echo.com/delete",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 15 Nov 2018 22:22:22 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"236-unqr/LuiPP07B85WHuciASf+YdA\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "set-cookie",
							"value": "sails.sid=s%3Aa9JaDxhKoLl3zyptDL3Vbo-kXgiIoqOY.o566AhO0IGGXbdop127kZi0Xq9bHd0q3RjrHgs2G9c4; Path=/; HttpOnly"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Length",
							"value": "415"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"args\": {},\n    \"data\": \"This is expected to be sent back as part of response body.\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"content-length\": \"58\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"content-type\": \"text/plain\",\n        \"cookie\": \"sails.sid=s%3AG3Skk-KwKzhuN9bCFLG38XDvX_n76FY7.SnEQNLnssVB0vIWq0%2Bqn%2FoZhMdvJqAp6Toc8YMDlMhw\",\n        \"postman-token\": \"a26a6cbb-abb4-4e8b-8a1e-4ba63450afcb\",\n        \"user-agent\": \"PostmanRuntime/7.3.0\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/delete\"\n}"
				}
			]
		},
		{
			"name": "Performance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 341ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(341);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "This is expected to be sent back as part of response body."
				},
				"url": {
					"raw": "https://gateway.marvel.com:443/v1/public/creators?apikey=",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"port": "443",
					"path": [
						"v1",
						"public",
						"creators"
					],
					"query": [
						{
							"key": "apikey",
							"value": ""
						}
					]
				},
				"description": "This test is to validate the response time. This SNIPPET is also available on the right sidebar under `Response time is less than 200ms`."
			},
			"response": [
				{
					"name": "Performance",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "This is expected to be sent back as part of response body."
						},
						"url": {
							"raw": "https://postman-echo.com/put",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"put"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 15 Nov 2018 22:21:34 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"235-EkrhuBWZKrBKKgRg6q6rJ7DOZ/o\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "set-cookie",
							"value": "sails.sid=s%3AUuE9kqyAFxbvBvvH8aX3WEBLXiNgjK7-.ErzxoeVFY7HfTK%2BPjoOs%2BzaP3yU8%2BcM59adz0oo9LlA; Path=/; HttpOnly"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Length",
							"value": "414"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"args\": {},\n    \"data\": \"This is expected to be sent back as part of response body.\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"content-length\": \"58\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"content-type\": \"text/plain\",\n        \"cookie\": \"sails.sid=s%3AK8csWt5VZ3Oalv85HiBtffDcrSOJ-RiP.V14RjjJqkOv8%2BLXuHRmZ9l50G8S6eU16yLU%2F3N%2F0dKU\",\n        \"postman-token\": \"cc394095-6587-4079-bcba-3705b175115d\",\n        \"user-agent\": \"PostmanRuntime/7.3.0\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/put\"\n}"
				}
			]
		},
		{
			"name": "JSON schema v4 validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {",
							"  \"items\": {",
							"    \"type\": \"boolean\"",
							"  }",
							"};",
							"",
							"var data1 = [true, false];",
							"var data2 = [true, 123];",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
							"//   pm.expect(tv4.validate(data2, schema)).to.be.true; // this statement would not be true",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://gateway.marvel.com:443/v1/public/creators?apikey=",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"port": "443",
					"path": [
						"v1",
						"public",
						"creators"
					],
					"query": [
						{
							"key": "apikey",
							"value": ""
						}
					]
				},
				"description": "A schema is simply a declaration describing the structure of data. Some teams use a specific schema and would like to validate their server responses against this schema. You can define a custom schema, and validate your your server responses against this schema.\n\nOne of the API tests that we previously talked about is validating that the response payloads returned from the server are well-formed. You can do that by making assertions that elements in the response match your expectations. \n\nReview the test written under the **Tests** tab to validate that response payloads returned from the server are well-formed. \n\nThis example uses [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/). The Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [json-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html)).\n\n"
			},
			"response": [
				{
					"name": "JSON schema v4",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo1",
									"value": "bar1"
								},
								{
									"key": "foo2",
									"value": "bar2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 15 Nov 2018 22:26:56 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"1c7-KZYP4szBTzxKQXHzZuUzeRc6eu8\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "set-cookie",
							"value": "sails.sid=s%3Azdvp_jvbvOB5mzzWKmS_7y6miNWal_a6.J5pGiESESIJ0CZLwvG9rF5Vsk4deBwxJhwo9E9JS4o8; Path=/; HttpOnly"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Length",
							"value": "342"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"args\": {\n        \"foo1\": \"bar1\",\n        \"foo2\": \"bar2\"\n    },\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"cookie\": \"sails.sid=s%3AwJjqwuZdKqKOiQ9FVnzMr8QoFaPFxpfD.ldt8sflpZLQkRbE1yyJtcIZIuirLfn4yFsVxtvFolWY\",\n        \"postman-token\": \"9dd498fe-4233-4512-a506-974f85cab10d\",\n        \"user-agent\": \"PostmanRuntime/7.3.0\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"url\": \"https://postman-echo.com/get?foo1=bar1&foo2=bar2\"\n}"
				}
			]
		},
		{
			"name": "Data type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function () {",
							"    pm.response.to.be.json;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "This is expected to be sent back as part of response body."
				},
				"url": {
					"raw": "https://gateway.marvel.com:443/v1/public/creators?apikey=",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"port": "443",
					"path": [
						"v1",
						"public",
						"creators"
					],
					"query": [
						{
							"key": "apikey",
							"value": ""
						}
					]
				},
				"description": "This test is to validate the content type of the returned content. This SNIPPET is also available on the right sidebar under `Response headers: Content-Type header check`."
			},
			"response": [
				{
					"name": "Data type",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "This is expected to be sent back as part of response body."
						},
						"url": {
							"raw": "https://postman-echo.com/patch",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"patch"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 15 Nov 2018 22:21:46 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"237-50TomUYGT9/V9ahCSqZGYpnnS48\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Length",
							"value": "410"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"args\": {},\n    \"data\": \"This is expected to be sent back as part of response body.\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"content-length\": \"58\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"content-type\": \"text/plain\",\n        \"cookie\": \"sails.sid=s%3AUuE9kqyAFxbvBvvH8aX3WEBLXiNgjK7-.ErzxoeVFY7HfTK%2BPjoOs%2BzaP3yU8%2BcM59adz0oo9LlA\",\n        \"postman-token\": \"ebd30dd5-0044-4665-ae5c-cb31118f1119\",\n        \"user-agent\": \"PostmanRuntime/7.3.0\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/patch\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});",
					"",
					"pm.test(\"Content-Type is JSON\", function () {",
					"    pm.response.to.be.json;",
					"})",
					"pm.test(\"response is ok\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"let jsonResponse = pm.response.json();",
					"",
					"pm.test(\"Response should be a parsable JSON\", function() {",
					"    pm.expect(jsonResponse).to.be.ok;",
					"});",
					"",
					"pm.test(\"Response body should be an object\", function() {",
					"    pm.expect(jsonResponse).to.be.an('object');",
					"});",
					"",
					"pm.test(\"Response body should be in the correct format\", function() {",
					"    pm.expect(jsonResponse.args).to.be.a('object');",
					"    pm.expect(jsonResponse.data).to.be.a('string');",
					"    pm.expect(jsonResponse.files).to.be.a('object');",
					"    pm.expect(jsonResponse.form).to.be.a('object');",
					"    pm.expect(jsonResponse.headers).to.be.a('object');",
					"});",
					"pm.test(\"Response time is less than 341ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(341);",
					"});",
					"var schema = {",
					"  \"items\": {",
					"    \"type\": \"boolean\"",
					"  }",
					"};",
					"",
					"var data1 = [true, false];",
					"var data2 = [true, 123];",
					"",
					"pm.test('Schema is valid', function() {",
					"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
					"//   pm.expect(tv4.validate(data2, schema)).to.be.true; // this statement would not be true",
					"});",
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});",
					"",
					"pm.test(\"Content-Type is JSON\", function () {",
					"    pm.response.to.be.json;",
					"})"
				]
			}
		}
	]
}